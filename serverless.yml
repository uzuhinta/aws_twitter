# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: personallearn
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: twitter-clone
# "service" is the name of this project. This will also be added to your AWS resource names.
service: func

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-northeast-1
  stage: dev
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}

appSync:
  name: my-api
  schema: 'schema.graphql'
  authentication:
    type: 'AMAZON_COGNITO_USER_POOLS'
    config:
      awsRegion: ap-northeast-1
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
  resolvers:
    getMyProfile:
      type: Query
      field: getMyProfile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Query.getMyProfile.request.vtl
          response: mapping-templates/Query.getMyProfile.response.vtl

    getImageUploadUrl:
      type: Query
      field: getImageUploadUrl
      functions:
        - dataSource: getImageUploadUrlDs
          kind: UNIT

    editMyProfile:
      type: Mutation
      field: editMyProfile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Mutation.editMyProfile.request.vtl
          response: mapping-templates/Mutation.editMyProfile.response.vtl

  dataSources:
    api:
      type: 'NONE'
    usersTableDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref UsersTable
    getImageUploadUrlDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: getImageUploadUrl

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
  getImageUploadUrl:
    handler: functions/get-upload-url.handler
    environment:
      BUCKET_NAME: !Ref AssetBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: !Sub ${AssetBucket.Arn}/*

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn
    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    AssetBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
  Outputs:
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

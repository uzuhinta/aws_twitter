# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: personallearn
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: twitter-clone
# "service" is the name of this project. This will also be added to your AWS resource names.
service: func

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-northeast-1
  stage: dev
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}

appSync:
  name: my-api
  schema: 'schema.graphql'
  authentication:
    type: 'AMAZON_COGNITO_USER_POOLS'
    config:
      awsRegion: ap-northeast-1
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
  resolvers:
    getMyProfile:
      type: Query
      field: getMyProfile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Query.getMyProfile.request.vtl
          response: mapping-templates/Query.getMyProfile.response.vtl

    getProfile:
      type: Query
      field: getProfile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Query.getProfile.request.vtl
          response: mapping-templates/Query.getProfile.response.vtl

    getImageUploadUrl:
      type: Query
      field: getImageUploadUrl
      functions:
        - dataSource: getImageUploadUrlDs
          kind: UNIT

    search:
      type: Query
      field: search
      functions:
        - dataSource: searchDs
          kind: UNIT
          
    getTweets:
      type: Query
      field: getTweets
      functions:
        - dataSource: tweetsTableDs
          request: mapping-templates/Query.getTweets.request.vtl
          response: mapping-templates/Query.getTweets.response.vtl
    getMyTimeLine:
      type: Query
      field: getMyTimeLine
      functions:
        - dataSource: timelinesTableDs
          request: mapping-templates/Query.getMyTimeLine.request.vtl
          response: mapping-templates/Query.getMyTimeLine.response.vtl

    getLikes:
      type: Query
      field: getLikes
      functions:
        - dataSource: likesTableDs
          request: mapping-templates/Query.getLikes.request.vtl
          response: mapping-templates/Query.getLikes.response.vtl

    getFollowers:
      type: Query
      field: getFollowers
      kind: PIPELINE
      functions:
        - getFollowers
        - hydrateFollowers
      request: mapping-templates/simplePipeline.request.vtl
      response: mapping-templates/simplePipeline.response.vtl

    getFollowing:
      type: Query
      field: getFollowing
      kind: PIPELINE
      functions:
        - getFollowing
        - hydrateFollowing
      request: mapping-templates/simplePipeline.request.vtl
      response: mapping-templates/simplePipeline.response.vtl

    editMyProfile:
      type: Mutation
      field: editMyProfile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Mutation.editMyProfile.request.vtl
          response: mapping-templates/Mutation.editMyProfile.response.vtl

    tweet:
      type: Mutation
      field: tweet
      functions:
        - dataSource: tweetDs
          kind: UNIT

    retweet:
      type: Mutation
      field: retweet
      functions:
        - dataSource: retweetDs
          kind: UNIT

    unretweet:
      type: Mutation
      field: unretweet
      functions:
        - dataSource: unretweetDs
          kind: UNIT

    reply:
      type: Mutation
      field: reply
      functions:
        - dataSource: replyDs
          kind: UNIT

    follow:
      type: Mutation
      field: follow
      functions:
        - dataSource: followMutation
          request: mapping-templates/Mutation.follow.request.vtl
          response: mapping-templates/Mutation.follow.response.vtl

    like:
      type: Mutation
      field: like
      functions:
        - dataSource: likeMutationDs
          request: mapping-templates/Mutation.like.request.vtl
          response: mapping-templates/Mutation.like.response.vtl

    unlike:
      type: Mutation
      field: unlike
      functions:
        - dataSource: unlikeMutationDs
          request: mapping-templates/Mutation.unlike.request.vtl
          response: mapping-templates/Mutation.unlike.response.vtl

    unfollow:
      type: Mutation
      field: unfollow
      functions:
        - dataSource: unfollowMutationDs
          request: mapping-templates/Mutation.unfollow.request.vtl
          response: mapping-templates/Mutation.unfollow.response.vtl

    # Nested
    profile:
      type: Tweet
      field: profile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Tweet.profile.request.vtl
          response: mapping-templates/Tweet.profile.response.vtl
    profile-retweet:
      type: Retweet
      field: profile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Tweet.profile.request.vtl
          response: mapping-templates/Tweet.profile.response.vtl
    profile-reply:
      type: Reply
      field: profile
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Tweet.profile.request.vtl
          response: mapping-templates/Tweet.profile.response.vtl
    liked:
      type: Tweet
      field: liked
      functions:
        - dataSource: likesTableDs
          request: mapping-templates/Tweet.liked.request.vtl
          response: mapping-templates/Tweet.liked.response.vtl
    retweetOf:
      type: Retweet
      field: retweetOf
      functions:
        - dataSource: tweetsTableDs
          request: mapping-templates/Retweet.retweetOf.request.vtl
          response: mapping-templates/Retweet.retweetOf.response.vtl
    inReplyToTweet:
      type: Reply
      field: inReplyToTweet
      functions:
        - dataSource: tweetsTableDs
          request: mapping-templates/Reply.inReplyToTweet.request.vtl
          response: mapping-templates/Reply.inReplyToTweet.response.vtl
    intReplyToUsers:
      type: Reply
      field: intReplyToUsers
      functions:
        - dataSource: usersTableDs
          request: mapping-templates/Reply.intReplyToUsers.request.vtl
          response: mapping-templates/Reply.intReplyToUsers.response.vtl
    tweets:
      type: TimelinePage
      field: tweets
      functions:
        - dataSource: tweetsTableDs
          request: mapping-templates/TimelinePage.tweets.request.vtl
          response: mapping-templates/TimelinePage.tweets.response.vtl
    tweetsMP:
      type: MyProfile
      field: tweets
      functions:
        - dataSource: tweetsTableDs
          request: mapping-templates/MyProfile.tweets.request.vtl
          response: mapping-templates/MyProfile.tweets.response.vtl
    following:
      type: OtherProfile
      field: following
      functions:
        - dataSource: relationshipsTableDs
          request: mapping-templates/OtherProfile.following.request.vtl
          response: mapping-templates/OtherProfile.following.response.vtl
    followedBy:
      type: OtherProfile
      field: followedBy
      functions:
        - dataSource: relationshipsTableDs
          request: mapping-templates/OtherProfile.followedBy.request.vtl
          response: mapping-templates/OtherProfile.followedBy.response.vtl
  dataSources:
    api:
      type: 'NONE'
    usersTableDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref UsersTable
    tweetsTableDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref TweetsTable
    timelinesTableDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref TimelinesTable
    likesTableDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref LikesTable
    relationshipsTableDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref RelationshipsTable
    likeMutationDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref LikesTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt LikesTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt UsersTable.Arn
              - !GetAtt TweetsTable.Arn
    followMutation:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref RelationshipsTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt RelationshipsTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: !GetAtt UsersTable.Arn
    unlikeMutationDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref LikesTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: !GetAtt LikesTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt UsersTable.Arn
              - !GetAtt TweetsTable.Arn
    unfollowMutationDs:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref RelationshipsTable
        iamRoleStatements:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: !GetAtt RelationshipsTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: !GetAtt UsersTable.Arn
    getImageUploadUrlDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: getImageUploadUrl
    tweetDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: tweetFunc
    retweetDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: retweetFunc

    unretweetDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: unretweetFunc

    replyDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: replyFunc

    searchDs:
      type: 'AWS_LAMBDA'
      config:
        functionName: search

  substitutions:
    TweetsTable: !Ref TweetsTable
    UsersTable: !Ref UsersTable
    LikesTable: !Ref LikesTable
    RelationshipsTable: !Ref RelationshipsTable
  pipelineFunctions:
    getFollowers:
      dataSource: relationshipsTableDs
      request: mapping-templates/getFollowers.request.vtl
      response: mapping-templates/getFollowers.response.vtl
    hydrateFollowers:
      dataSource: usersTableDs
      request: mapping-templates/hydrateFollowers.request.vtl
      response: mapping-templates/hydrateFollowers.response.vtl
    getFollowing:
      dataSource: relationshipsTableDs
      request: mapping-templates/getFollowing.request.vtl
      response: mapping-templates/getFollowing.response.vtl
    hydrateFollowing:
      dataSource: usersTableDs
      request: mapping-templates/hydrateFollowing.request.vtl
      response: mapping-templates/hydrateFollowing.response.vtl
functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
  getImageUploadUrl:
    handler: functions/get-upload-url.handler
    environment:
      BUCKET_NAME: !Ref AssetBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: !Sub ${AssetBucket.Arn}/*
  tweetFunc:
    handler: functions/tweet.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
      TWEETS_TABLE_NAME: !Ref TweetsTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
  retweetFunc:
    handler: functions/retweet.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
      TWEETS_TABLE_NAME: !Ref TweetsTable
      RETWEETS_TABLE_NAME: !Ref RetweetsTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
          - !GetAtt RetweetsTable.Arn

  unretweetFunc:
    handler: functions/unretweet.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
      TWEETS_TABLE_NAME: !Ref TweetsTable
      RETWEETS_TABLE_NAME: !Ref RetweetsTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !Sub '${TweetsTable.Arn}/index/retweetsByCreator'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
          - !GetAtt RetweetsTable.Arn

  replyFunc:
    handler: functions/reply.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
      TWEETS_TABLE_NAME: !Ref TweetsTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn

  distributeTweets:
    handler: functions/distribute-tweets.handler
    environment:
      RELATIONSHIPS_TABLE_NAME: !Ref RelationshipsTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TweetsTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
        Resource: !GetAtt TimelinesTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !Sub '${RelationshipsTable.Arn}/index/byOtherUser'

  distributeTweetsToFollower:
    handler: functions/distribute-tweets-to-follower.handler
    environment:
      TWEETS_TABLE_NAME: !Ref TweetsTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
      MAX_TWEETS: '100'
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt RelationshipsTable.StreamArn
    iamRoleStatementsName: ${self:service}-${self:custom.stage}-distributeTweetsToFollower
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !Sub '${TweetsTable.Arn}/index/byCreator'
          - !Sub '${TimelinesTable.Arn}/index/byDistributedFrom'
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: !GetAtt TimelinesTable.Arn

  syncUserToAlgolia:
    handler: functions/sync-user-to-algolia.handler
    environment:
      ALGOLIA_APP_ID: 1MVZUHJGN4
      ALGOLIA_WRITE_KEY: 391bf889e027e951bf99d1550cbe2205
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt UsersTable.StreamArn
  syncTweetToAlgolia:
    handler: functions/sync-tweet-to-algolia.handler
    environment:
      ALGOLIA_APP_ID: 1MVZUHJGN4
      ALGOLIA_WRITE_KEY: 391bf889e027e951bf99d1550cbe2205
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TweetsTable.StreamArn
  search:
    handler: functions/search.handler
    environment:
      ALGOLIA_APP_ID: 1MVZUHJGN4
      ALGOLIA_WRITE_KEY: 391bf889e027e951bf99d1550cbe2205

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: screenName
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byScreenName
            KeySchema:
              - AttributeName: screenName
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table
    TweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: creator
            AttributeType: S
          - AttributeName: retweetOf
            AttributeType: S
          - AttributeName: inReplyToTweetId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byCreator
            KeySchema:
              - AttributeName: creator
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: retweetsByCreator
            KeySchema:
              - AttributeName: creator
                KeyType: HASH
              - AttributeName: retweetOf
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: repliesForTweet
            KeySchema:
              - AttributeName: inReplyToTweetId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: tweets-table
    TimelinesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
          - AttributeName: distributedFrom
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byDistributedFrom
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: distributedFrom
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: timelines-table
    LikesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: likes-table
    RetweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: retweets-table
    RelationshipsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: otherUserId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byOtherUser
            KeySchema:
              - AttributeName: otherUserId
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: relationships-table
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn
    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    AssetBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
  Outputs:
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
